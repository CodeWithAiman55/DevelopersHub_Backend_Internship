{
    "sourceFile": "NODEJS-RBAC-TUTORIAL/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1745155390037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745155419319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,191 @@\n+const cookieParser = require(\"cookie-parser\");\r\n+const dotenv = require(\"dotenv\").config();\r\n+const express = require(\"express\");\r\n+const dbConnect = require(\"./config/dbConnect\");\r\n+const authRoutes = require(\"./routes/authRoutes\");\r\n+const userRoutes = require(\"./routes/userRoutes\");\r\n+const isAdmin = require(\"./middlewares/isAdmin\");\r\n+const mongodb = require(\"mongodb\");\r\n+const mongoose = require(\"mongoose\");\r\n+const path = require(\"path\");\r\n+const routes = require(\"./routes/routes\");\r\n+const productRoutes = require(\"./routes/productRoutes\");\r\n+const verifyToken = require(\"./middlewares/verifyToken\");\r\n+const authMiddleware = require(\"./middlewares/verifyToken\");\r\n+const route = require(\"./routes/route\");\r\n+const Product = require('./models/products'); // import model at top\r\n+const productDetail = require('./models/productDetailSchema'); // import model at top\r\n+const router = express.Router();\r\n+const app = express();\r\n+\r\n+// Middlewares\r\n+app.use(express.json());\r\n+app.use(express.urlencoded({ extended: false }));\r\n+app.use(express.static(\"public\"));\r\n+app.use(express.static(path.join(__dirname, \"public\")));\r\n+app.use(cookieParser());\r\n+\r\n+app.set(\"view engine\", \"ejs\");\r\n+app.set(\"views\", path.join(__dirname, \"views\"));\r\n+\r\n+// Routes\r\n+app.use(\"/api/auth\", authRoutes);\r\n+app.use(\"/api/users\", userRoutes);\r\n+// app.use(\"/dashboardRoutes\", routes);\r\n+app.use(\"/routes\", route);\r\n+app.use('/api/admin', authMiddleware, authRoutes);\r\n+app.use('/api/user', authMiddleware, userRoutes);\r\n+// Routes\r\n+app.use(\"/api/auth\", authRoutes);\r\n+app.use(\"/api/products\", productRoutes);\r\n+\r\n+app.get(\"/homeController\", routes);\r\n+app.post(\"/homeController\", routes);\r\n+app.get(\"/\", (req, res) => {\r\n+  res.render(\"credentials\");\r\n+});\r\n+\r\n+app.get(\"/register\", (req, res) => {\r\n+  res.render(\"register\");\r\n+});\r\n+\r\n+\r\n+\r\n+app.get(\"/home\", (req, res) => {\r\n+  res.render(\"home\");\r\n+});\r\n+\r\n+\r\n+// Admin Dashboard route\r\n+app.get('/adminDashboard', authMiddleware, (req, res) => {\r\n+  res.render('adminDashboard'); \r\n+});\r\n+\r\n+app.get('/index', (req,res) => {\r\n+  res.render('index');\r\n+})\r\n+\r\n+\r\n+// Login route\r\n+app.get('/login', (req, res) => {\r\n+ \r\n+  res.render('login');\r\n+});\r\n+\r\n+// Calling function\r\n+dbConnect();\r\n+\r\n+\r\n+\r\n+app.use('/images', express.static('public/images'));\r\n+\r\n+app.use(express.urlencoded({ extended: true })); // form data handle karne ke liye\r\n+// app.use('/images', express.static(path.join(__dirname, 'public', 'images')));\r\n+// Connect to MongoDB\r\n+mongoose.connect(process.env.MONGODB_URI, {\r\n+  useNewUrlParser: true,\r\n+  useUnifiedTopology: true\r\n+})\r\n+.then(() => console.log('✅ MongoDB connected'))\r\n+.catch(err => console.error('❌ MongoDB connection error:', err));\r\n+\r\n+// Static Files\r\n+app.use(express.static(path.join(__dirname, 'public')));\r\n+app.use('/images', express.static('public/images'));\r\n+\r\n+app.set(\"view engine\", \"ejs\");\r\n+app.set(\"views\", path.join(__dirname, \"views\"));\r\n+\r\n+// Routes\r\n+app.get('/', async (req, res) => {\r\n+  try {\r\n+    const featuredProducts = await Product.find({}).limit(5);  // Adjust the limit based on how many products you want to show\r\n+    res.render('index', { products: featuredProducts }); // Rendering home.ejs with featured products\r\n+  } catch (err) {\r\n+    console.log(err);\r\n+    res.status(500).send('Error fetching products');\r\n+  }\r\n+});\r\n+\r\n+// Products Route\r\n+app.get('/products', async (req, res) => {\r\n+  try {\r\n+    // Product listing page pe products fetch karna\r\n+    const products = await Product.find();\r\n+    res.render('product', { products }); // \"product.ejs\" page me products pass karo\r\n+  } catch (err) {\r\n+    console.log(err);\r\n+    res.status(500).send('Error fetching products');\r\n+  }\r\n+});\r\n+\r\n+app.get('/products/:id', async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) {\r\n+      return res.status(404).send('Product not found');\r\n+    }\r\n+    res.render('productDetailPage', { product });\r\n+  } catch (err) {\r\n+    console.log(err);\r\n+    res.status(500).send('Error fetching product details');\r\n+  }\r\n+  z\r\n+});\r\n+\r\n+\r\n+\r\n+// Route for product detail page\r\n+app.get('/productDetailPage/:id', (req, res) => {\r\n+  const productId = req.params.id; // Get product ID from URL\r\n+\r\n+  // Find the product in the database by its ID\r\n+  Product.findById(productId)\r\n+    .then(product => {\r\n+      if (!product) {\r\n+        return res.status(404).send('Product not found'); // Handle product not found\r\n+      }\r\n+      // Send product data to EJS view\r\n+      res.render('productDetailPage', { product });\r\n+    })\r\n+    .catch(err => {\r\n+      console.error(err);\r\n+      res.status(500).send('Server error');\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+router.get(\"/productDetailPage/:id\", async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) {\r\n+      return res.status(404).render(\"notFoundPage\");\r\n+    }\r\n+\r\n+    res.render(\"productDetailPage\", { product });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).render(\"errorPage\");\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+app.get('/cart', (req, res) => {\r\n+  res.render('cartPage');\r\n+});\r\n+\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server is listening on https://localhost:${PORT}`);\r\n+});\r\n+\r\n+\r\n+// Start the server\r\n+// const PORT = process.env.PORT || 7002;\r\n+const PORT = 5004;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server is running at port ${PORT}`);\r\n+}); \n\\ No newline at end of file\n"
                }
            ],
            "date": 1745155390037,
            "name": "Commit-0",
            "content": "const cookieParser = require(\"cookie-parser\");\r\nconst dotenv = require(\"dotenv\").config();\r\nconst express = require(\"express\");\r\nconst dbConnect = require(\"./config/dbConnect\");\r\nconst authRoutes = require(\"./routes/authRoutes\");\r\nconst userRoutes = require(\"./routes/userRoutes\");\r\nconst isAdmin = require(\"./middlewares/isAdmin\");\r\nconst mongodb = require(\"mongodb\");\r\nconst mongoose = require(\"mongoose\");\r\nconst path = require(\"path\");\r\nconst routes = require(\"./routes/routes\");\r\nconst productRoutes = require(\"./routes/productRoutes\");\r\nconst verifyToken = require(\"./middlewares/verifyToken\");\r\nconst authMiddleware = require(\"./middlewares/verifyToken\");\r\nconst route = require(\"./routes/route\");\r\nconst app = express();\r\n\r\n// Middlewares\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(express.static(\"public\"));\r\napp.use(express.static(path.join(__dirname, \"public\")));\r\napp.use(cookieParser());\r\n\r\napp.set(\"view engine\", \"ejs\");\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\n\r\n// Routes\r\napp.use(\"/api/auth\", authRoutes);\r\napp.use(\"/api/users\", userRoutes);\r\n// app.use(\"/dashboardRoutes\", routes);\r\napp.use(\"/routes\", route);\r\napp.use('/api/admin', authMiddleware, authRoutes);\r\napp.use('/api/user', authMiddleware, userRoutes);\r\n// Routes\r\napp.use(\"/api/auth\", authRoutes);\r\napp.use(\"/api/products\", productRoutes);\r\n\r\napp.get(\"/homeController\", routes);\r\napp.post(\"/homeController\", routes);\r\napp.get(\"/\", (req, res) => {\r\n  res.render(\"credentials\");\r\n});\r\n\r\napp.get(\"/register\", (req, res) => {\r\n  res.render(\"register\");\r\n});\r\n\r\n\r\n\r\napp.get(\"/home\", (req, res) => {\r\n  res.render(\"home\");\r\n});\r\n\r\n\r\n// Admin Dashboard route\r\napp.get('/adminDashboard', authMiddleware, (req, res) => {\r\n  res.render('adminDashboard'); \r\n});\r\n\r\napp.get('/index', (req,res) => {\r\n  res.render('index');\r\n})\r\n\r\n\r\n// Login route\r\napp.get('/login', (req, res) => {\r\n \r\n  res.render('login');\r\n});\r\n\r\n// Calling function\r\ndbConnect();\r\n\r\n\r\n\r\napp.use('/images', express.static('public/images'));\r\n\r\napp.use(express.urlencoded({ extended: true })); // form data handle karne ke liye\r\n// app.use('/images', express.static(path.join(__dirname, 'public', 'images')));\r\n// Connect to MongoDB\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true\r\n})\r\n.then(() => console.log('✅ MongoDB connected'))\r\n.catch(err => console.error('❌ MongoDB connection error:', err));\r\n\r\n// Static Files\r\napp.use(express.static(path.join(__dirname, 'public')));\r\napp.use('/images', express.static('public/images'));\r\n\r\napp.set(\"view engine\", \"ejs\");\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\n\r\n// Routes\r\napp.get('/', async (req, res) => {\r\n  try {\r\n    const featuredProducts = await Product.find({}).limit(5);  // Adjust the limit based on how many products you want to show\r\n    res.render('index', { products: featuredProducts }); // Rendering home.ejs with featured products\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(500).send('Error fetching products');\r\n  }\r\n});\r\n\r\n// Products Route\r\napp.get('/products', async (req, res) => {\r\n  try {\r\n    // Product listing page pe products fetch karna\r\n    const products = await Product.find();\r\n    res.render('product', { products }); // \"product.ejs\" page me products pass karo\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(500).send('Error fetching products');\r\n  }\r\n});\r\n\r\napp.get('/products/:id', async (req, res) => {\r\n  try {\r\n    const product = await Product.findById(req.params.id);\r\n    if (!product) {\r\n      return res.status(404).send('Product not found');\r\n    }\r\n    res.render('productDetailPage', { product });\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(500).send('Error fetching product details');\r\n  }\r\n  z\r\n});\r\n\r\n\r\n\r\n// Route for product detail page\r\napp.get('/productDetailPage/:id', (req, res) => {\r\n  const productId = req.params.id; // Get product ID from URL\r\n\r\n  // Find the product in the database by its ID\r\n  Product.findById(productId)\r\n    .then(product => {\r\n      if (!product) {\r\n        return res.status(404).send('Product not found'); // Handle product not found\r\n      }\r\n      // Send product data to EJS view\r\n      res.render('productDetailPage', { product });\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n      res.status(500).send('Server error');\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n\r\nrouter.get(\"/productDetailPage/:id\", async (req, res) => {\r\n  try {\r\n    const product = await Product.findById(req.params.id);\r\n    if (!product) {\r\n      return res.status(404).render(\"notFoundPage\");\r\n    }\r\n\r\n    res.render(\"productDetailPage\", { product });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).render(\"errorPage\");\r\n  }\r\n});\r\n\r\n\r\n\r\napp.get('/cart', (req, res) => {\r\n  res.render('cartPage');\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is listening on https://localhost:${PORT}`);\r\n});\r\n\r\n\r\n// Start the server\r\n// const PORT = process.env.PORT || 7002;\r\nconst PORT = 5004;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running at port ${PORT}`);\r\n}); "
        }
    ]
}